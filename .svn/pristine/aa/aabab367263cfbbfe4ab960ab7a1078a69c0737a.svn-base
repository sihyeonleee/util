package service.manager; 

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JTabbedPane;
import javax.swing.border.BevelBorder;
import javax.swing.border.EmptyBorder;

import comm.CustomThread;
import comm.fileio.TextFileWriter;
import gui.obj.CompObj;
import gui.obj.FrameObj;
import gui.obj.ImageObj;
import gui.obj.calendar.CalendarViewer;
import service.Service;
import service.manager.task.TaskCalendarPanel;
import service.manager.task.TaskContentsPanel;
import service.manager.task.TaskInfoPanel;
import service.manager.task.TaskListPanel;
import service.manager.task.TaskObject;  

public class TaskManager2Service extends Service { 

	// 경로
	private static final String ROOTDIR = "task";
	private static final String ROOTPATH = comm.Path.ROOTPATH + ROOTDIR + File.separator;
	private static final String FILEDIRNAME = "reference";
	private static final String FILEDBNAME = "INFO";
	private static final String FILEDBEXTN = "lsh";
	
	// 콤보박스 기본값
	private static final String comboDefaultDomain = "범위"; // 프로젝트
	private static final String comboDefaultFilt = "필터"; // 검색 필터
	private static final String comboDefaultColor = "색상"; // 색상
	private static final String comboDefaultSort = "정렬"; // 정렬
	
	// 콤보박스 리스트
	private static final List<String> domains = new ArrayList<>();
	private static final String[] filters = { comboDefaultFilt, "이름", "태그", "날짜" };
	private static final List<String> colors = new ArrayList<>(); // 유동적인 색상 변화를 위해
	private static final String[] sorts = { comboDefaultSort, "이름순", "최신순" };
	
	// 패널 영역
	private TaskCalendarPanel caldrPanel;
	private TaskContentsPanel contsPanel;
	private TaskListPanel tasksPanel;
	private TaskInfoPanel infoPanel;
	
	// 데이터
	private Map<String, Map<String, Map<String, Map<String, String>>>> db = new HashMap<>();
	
	// 검색 리스트
	private int nowFocusIndex = 0;
	private Map<String, Map<String, String>> allDataList = new HashMap<>();
	private Map<String, Map<String, String>> filtDataList = new HashMap<>();
	private List<Map<String, String>> searchTask = new ArrayList<>();
	private List<Map<String, String>> searchFile = new ArrayList<>();
	
	
	
	
	
	
	
	/**
	 * @Date   : 2020. 1. 10.
	 * @Role   : Main UI Setting
	 * @Dcpt   : Initial Method
	 */
	public TaskManager2Service(){ 

		// 프레임 설정
		width = 320;
		height = 420;
		layout = FrameObj.LAYOUT_GRIDBAG;

		// 컴포넌트 설정
		CompObj search1 = new CompObj();
		search1.setType(CompObj.TYPE_INPUT);
		search1.setEvtName("search");
		search1.setArrangeType(GridBagConstraints.BOTH);
		search1.setEventType(CompObj.EVENT_TYPING, CompObj.EVENT_KEYTYPE);
		search1.setGridPosition(0, 0);
		search1.setGridSize(10, 1);
		componentObjs.add(search1);
		
		CompObj line1 = new CompObj();
		line1.setType(CompObj.TYPE_OUTPUT);
		line1.setArrangeType(GridBagConstraints.BOTH);
		line1.setGridPosition(0, 1);
		line1.setGridSize(10, 1);
		componentObjs.add(line1);
		
		CompObj addFolder = new CompObj();
		addFolder.setName("추가");
		addFolder.setEvtName("add");
		addFolder.setType(CompObj.TYPE_BUTTON);
		addFolder.setEventType(CompObj.EVENT_ACTION);
		addFolder.setArrangeType(GridBagConstraints.BOTH);
		addFolder.setGridPosition(0, 2);
		addFolder.setGridSize(2, 1);
		componentObjs.add(addFolder);
		
		CompObj delFolder = new CompObj();
		delFolder.setName("삭제");
		delFolder.setEvtName("delete");
		delFolder.setType(CompObj.TYPE_BUTTON);
		delFolder.setEventType(CompObj.EVENT_ACTION);
		delFolder.setArrangeType(GridBagConstraints.BOTH);
		delFolder.setGridPosition(2, 2);
		delFolder.setGridSize(2, 1);
		componentObjs.add(delFolder);
		
		domains.add(comboDefaultDomain);
		CompObj select1 = new CompObj();
		select1.setEvtName("domain");
		select1.setType(CompObj.TYPE_COMBOBOX);
		select1.setSelectItems(domains);
		select1.setEventType(CompObj.EVENT_ACTION);
		select1.setArrangeType(GridBagConstraints.BOTH);
		select1.setGridPosition(0, 3);
		select1.setGridSize(1, 1);
		componentObjs.add(select1);
		
		CompObj select2 = new CompObj();
		select2.setEvtName("filter");
		select2.setType(CompObj.TYPE_COMBOBOX);
		select2.setSelectItems(filters);
		select2.setEventType(CompObj.EVENT_ACTION);
		select2.setArrangeType(GridBagConstraints.BOTH);
		select2.setGridPosition(1, 3);
		select2.setGridSize(1, 1);
		componentObjs.add(select2);
		
		colors.add(comboDefaultColor);
		Map<String, Color> colorMap = ImageObj.getColorPickers();
		for(Map.Entry<String, Color> map : colorMap.entrySet()) colors.add(map.getKey());
		CompObj select3 = new CompObj();
		select3.setEvtName("color");
		select3.setType(CompObj.TYPE_COMBOBOX);
		select3.setSelectItems(colors);
		select3.setEventType(CompObj.EVENT_ACTION);
		select3.setArrangeType(GridBagConstraints.BOTH);
		select3.setGridPosition(2, 3);
		select3.setGridSize(1, 1);
		componentObjs.add(select3);
		
		CompObj select4 = new CompObj();
		select4.setEvtName("sort");
		select4.setType(CompObj.TYPE_COMBOBOX);
		select4.setSelectItems(sorts);
		select4.setEventType(CompObj.EVENT_ACTION);
		select4.setArrangeType(GridBagConstraints.BOTH);
		select4.setGridPosition(3, 3);
		select4.setGridSize(1, 1);
		componentObjs.add(select4);
		
		CompObj line2 = new CompObj();
		line2.setType(CompObj.TYPE_OUTPUT);
		line2.setArrangeType(GridBagConstraints.BOTH);
		line2.setGridPosition(0, 4);
		line2.setGridSize(10, 1);
		componentObjs.add(line2);
		
		CompObj mainPanel = new CompObj();
		mainPanel.setType(CompObj.TYPE_TABPANEL);
		mainPanel.setScrollAt(false);
		mainPanel.setGridSize(5, 1);
		mainPanel.setGridWeight(1, 120);
		mainPanel.setGridPosition(0, 5);
		mainPanel.setArrangeType(GridBagConstraints.BOTH);
		componentObjs.add(mainPanel);
		
		this.caldrPanel = new TaskCalendarPanel();
		this.contsPanel = new TaskContentsPanel();
		this.tasksPanel = new TaskListPanel();
		this.infoPanel = new TaskInfoPanel();
		
		caldrPanel.setBackground(Color.WHITE);
		contsPanel.setBackground(Color.WHITE);
		tasksPanel.setBackground(Color.WHITE);
		infoPanel.setBackground(Color.WHITE);
	}

	@Override
	public void doShow(String name) {
		if(((JTabbedPane) this.panels.get(0)).getTabCount() < 1) init();
		beforeDoShow();
		super.doShow(name);
		afterDoShow();
	}
	
	public void init(){
		inputs.get(0).setBorder(new BevelBorder(BevelBorder.LOWERED));
		outputs.get(0).setBorder(new EmptyBorder(5, 0, 5, 0)); // Line
		buttons.get(0).setOpaque(false);
		buttons.get(0).setForeground(Color.RED);
		buttons.get(0).setBackground(new Color(0,0,0,0));
		buttons.get(1).setOpaque(false);
		buttons.get(1).setBackground(new Color(0,0,0,0));
		buttons.get(1).setForeground(Color.BLUE);
		outputs.get(1).setBorder(new EmptyBorder(5, 0, 5, 0)); // Line
		
		JTabbedPane panel = (JTabbedPane) panels.get(0);
		panel.addTab("달력", this.caldrPanel);
		panel.addTab("목록", this.tasksPanel);
		panel.addTab("정보", this.contsPanel);
		panel.addTab("도움말", this.infoPanel);
	}
	
	public void beforeDoShow(){
		loadData();
		setDomainBoxItems();
	}
	
	public void afterDoShow(){
		inputs.get(0).requestFocus();
	}
	
	
	
	
	
	
	
	/**
	 * @Date   : 2020. 1. 10.
	 * @Role   : 상시 호출 메인 메소드
	 * @Dcpt   : 
	 */
	public void loadData(){
		
		searchKeyWord();
		
	}
	
	public void searchKeyWord(){
		
		loadComponent();
		
	}
	
	public void loadComponent(){
		
		// 초기화
		caldrPanel.init();
		tasksPanel.init();
		contsPanel.init();
		
		// load Component List
		caldrPanel.loadComponent(this.searchTask);
		tasksPanel.loadComponent(this.searchTask);
		
	}
	
	public void writeData(String domain, String directory, String uuid, boolean append){
		
	}
	
	
	
	
	
	
	
	/**
	 * @Date   : 2020. 1. 10.
	 * @Role   : 이벤트
	 * @Dcpt   : 키 입력 , 달력 선택
	 */	
	@Override
	public void onEvent(String type, CompObj obj, Object...objects) throws Exception {

		if(type.equals("keyPress") && "search".equals(obj.getEvtName())){
			keyPressEvt((KeyEvent) objects[0]);
		}
		
//		String threadName = "TaskManagerService";
//		runThread(threadName, false);

	}

	public void keyPressEvt(KeyEvent e){

	}

	
	
	
	
	
	
	
	/**
	 * @Date   : 2020. 1. 10.
	 * @Role   : 셋팅 함수
	 * @Dcpt   : 도메인 콤보박스, 기본 파일정보
	 */
	// 프로젝트 콤보박스 셋팅
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void setDomainBoxItems(){
		domains.clear();
		domains.add(this.comboDefaultDomain);
		for(Entry<String, ?> key : db.entrySet()) domains.add(key.getKey());
		comboBoxes.get(0).setModel(new DefaultComboBoxModel(domains.toArray()));
	}
	
	// 파일 기본 정보 셋팅
	public Map<String, String> getFileInfoBase(String name, boolean isTaskType){
		Map<String, String> vo = new HashMap<>();
		return vo;
	}
	
	
	
	
	
	
	
	
	
	/**
	 * @Date   : 2020. 1. 10.
	 * @Role   : 선택 함수
	 * @Dcpt   : 스레드
	 */
	@Override
	public CustomThread createThread(){
		return new CustomThread(){
			@Override
			public void run() {

			}
		};
	}

	public boolean navigation(String target, String keyword){
		boolean find = false;
		
		if(keyword.contains("|")){
			String[] orKeywords = keyword.toLowerCase().split("\\|");
			if(orKeywords != null)
				for(String orKeyword : orKeywords)
					if(target.toLowerCase().contains(orKeyword.toLowerCase())) find = true;
		}else if(keyword.contains("~")){
			String[] betweenKeywords = keyword.toLowerCase().split("\\~");
			try {
				SimpleDateFormat transFormat = new SimpleDateFormat("yyyy/MM/dd");
				Date fileDt = transFormat.parse(target);
				Date start = transFormat.parse(betweenKeywords[0]);
				Date end = transFormat.parse(betweenKeywords[1]);
				if(fileDt.compareTo(start) >= 0 && fileDt.compareTo(end) <= 0) find = true;
			} catch (Exception e) {}
		}else {
			if(target.toLowerCase().contains(keyword.toLowerCase())) find = true;
		}
		
		return find;
	}
	
	public boolean rangeDate(String target, String keyword){
		boolean find = false;

		SimpleDateFormat transFormat = new SimpleDateFormat("yyyy/MM/dd");
		String[] betweenTarger = target.split("\\~");
		
		Date fStart = null;
		Date fEnd = null;
		
		try {
			fStart = transFormat.parse(betweenTarger[0]);
			fEnd = transFormat.parse(betweenTarger[1]);
		} catch (ParseException e1) {
		}
		
		if(keyword.contains("~")){
			String[] betweenKeywords = keyword.split("\\~");
			try {
				Date start = transFormat.parse(betweenKeywords[0]);
				Date end = transFormat.parse(betweenKeywords[1]);
				if(fStart.compareTo(end)>=0 && fEnd.compareTo(start)<=0){
					find = true;
				}
			} catch (Exception e) {}
		}else {
			try{
				Date start = transFormat.parse(keyword);
				if(fStart.compareTo(start)<=0 && fEnd.compareTo(start)>=0){
					find = true;
				}
			}catch(Exception e){}
		}
		
		return find;
	}


}








